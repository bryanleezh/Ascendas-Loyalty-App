# This is a basic workflow to help you get started with Actions

name: CI
# Add permissions for workflow
permissions:
  id-token: write
  contents: read
  pull-requests: read

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
          
      - name: Get Current Pull Request
        uses: 8BitJonny/gh-get-current-pr@2.2.0
        id: pr
        with:
          sha: ${{ github.event.pull_request.head.sha }}
          filterOutClosed: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - id: file_changes
        name: File Changes
        uses: trilom/file-changes-action@v1.2.3
        with:
          prNumber: ${{ steps.pr.outputs.number }}
          pushBefore: ''
          pushAfter: ''
        
      - name: Ouput File Changes
        run: echo '${{ steps.file_changes.outputs.files }}'

      # Runs a single command using the runners shell
      - name: Trigger admin-proxy workflow
        if: contains(steps.file_changes.outputs.files , '"admin-proxy/')
        run: cd /admin-proxy && npm install && npm run build && npm run test
        # uses: ./.github/workflows/node-test-runner
        

      - name: Trigger frontend workflow
        if: contains(steps.file_changes.outputs.files , '"frontend/')
        run: echo Hello, frontend!
        
      - name: Trigger testMicroservice workflow
        if: contains(steps.file_changes.outputs.files , '"testMicroservice/')
        run: echo Hello, testMicroservice!